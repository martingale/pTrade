grep ("asc", history())
grepl ("asc", history())
history()
history
history(100)
(RODBC::sqlQuery(dbhandle, "select * from CASHFLOW where ISIN='DISCLOSUREID' order by DISCLOSUREID ASC"))
(RODBC::sqlQuery(dbhandle, "select * from CASHFLOW where ISIN='TRFGDKMA1713' order by DISCLOSUREID ASC"))
(RODBC::sqlQuery(dbhandle, "select * from CASHFLOW where ISIN='TRFGDKMA1713'"))
lapply(aciklar$ISIN[[1]],function(x) tryCatch ({rasyoGetCoupons(x)},error=function(e) NA))
rasyoGetCoupons<-function (isinCode="TRSSKFKA1714"){
try(library("httr"), stop("install the package httr"))
try(library("XML"), stop("install the package XML"))
rawXml <- GET(paste0("93.94.252.20/marketsservicenew/MarketsService.asmx/CouponTable?isinCode=",isinCode))
rawXmlAsText<-xmlParse(content(rawXml,as="text"))
rawXmlAsTable<-getNodeSet(rawXmlAsText,"//*/Table1")
cDatesR<-as.Date(unlist(sapply(rawXmlAsTable,function(x) getNodeSet(x,"Kupon_x0020_Tarihi",fun = xmlValue))))
cRatesR<-as.numeric(unlist(sapply(rawXmlAsTable,function(x) getNodeSet(x,"Kupon_x0020_Oranı",fun = xmlValue))))
# diff.Date(cDatesR)
data.frame(cDatesR,cRatesR)
}
kapids <- c( 609185,         594175,          611275,          610958)
names(kapids) <- c("TRFGDKMA1713", "TRSSKFKA1714", "TRSAKFHA1719", "TRSSKFKA1813")
rasyo<-rasyoGetCoupons("TRT120325T12")
t(rasyo)
diff(rasyo$cDatesR)
rasyo<-rasyoGetCoupons("TRT120325T12")
t(rasyo)
library("RODBC")
dbhandle<-odbcConnect("osmanli1", "osmanl"ibond_usr", "osmanlibond1*") # c("osmanli1", "osmanlibond_usr", "osmanlibond1*")
bondDef <- RODBC::sqlQuery(dbhandle, "select * from BONDDEFINITION WHERE ISIN = 'TRFGDKMA1713' ")
# res$DAYCOUNTCONVENTION<-3
bondDef$NEXTCOUPONDATE<-rasyo$cDatesR[1]
bondDef$COUPONRATE<-rasyo$cRatesR[1] * 1e-2
# bondDef$QLIBCOUPONRATE<-res$COUPONRATE*4
bondDef$MATURITY<-as.Date(bondDef$MATURITY)+1
# sqlUpdate(dbhandle, bondDef, tablename = "BONDDEFINITION", verbose = T,test=F)
library(rvest)
library(stringr)
j<-1
the_page <- read_html(paste0("https://www.kap.org.tr/tr/Bildirim/",kapids[j]))
allTables <- the_page %>%
html_nodes("table") %>%html_table(header = T,fill=T)
couponTableIndex<- sapply(allTables,names) %>%
sapply(function(x) grepl(x,pattern="kupon.*no$",ignore.case=T))  %>%
sapply(any) %>%
which
couponTableIndex
couponTable<- allTables[[couponTableIndex]]
couponTable[,5]<-stringr::str_replace_all(couponTable[,5] , "," , ".") %>% as.numeric %>% "/"(100)
couponTable[,c(2:4)]<- couponTable[,c(2:4)] %>% unlist %>% as.Date(format="%d.%m.%Y")
for(i in 2:4) class(couponTable[,i])<-"Date"
# couponTable[,2:4]
head(couponTable)
fcouponTable <- couponTable[,c(4,5)]
naCut<-which(!is.na(fcouponTable[,2])) %>% tail(1)
relDayDiffs<-diff(fcouponTable[,1])[(naCut-1 ): naCut]
fcouponTable <-data.frame(c(NA,diff(fcouponTable[,1])), fcouponTable)
tail(fcouponTable[,1],-1) / head(fcouponTable[,1],-1)
for(i in (naCut+1):nrow(fcouponTable)){
fcouponTable[i,3]<- fcouponTable[i-1,3] * fcouponTable[i,1] / fcouponTable[i-1,1]
}
#
# ##### RQuantLib ########
library("RQuantLib")
myIssueDate<-as.Date(bondDef$ISSUEDATE)
myMaturityDate<-as.Date(bondDef$MATURITY)
myCouponRate<-(bondDef$COUPONRATE)
setEvaluationDate(myToday<-as.Date(Sys.Date()))
myCouponPeriod<-bondDef$COUPONPERIOD
coupon.rate <-bondDef$QLIBCOUPONRATE
myFaceAmount<-100
bond <- list(settlementDays=0,
issueDate=myIssueDate,
faceAmount=myFaceAmount,
dayCounter=7,
paymentConvention='Following')
cDates<- as.Date(head(fcouponTable[,2],-1),"%d.%m.%Y")
#
calc=list(dayCounter=7,
compounding='Compounded',
freq='Annual',
durationType='Modified')
setEvaluationDate(myToday)
myCleanPrice<-100.12
coupon.rate<- fcouponTable[,3] #fcouponTable$`Faiz Oranı (%)`
nodeDates<-c(as.Date(bondDef$ISSUEDATE),cDates)
yF<-RQuantLib::yearFraction(head(nodeDates,-1),tail(nodeDates,-1),dayCounters = rep(7,length(cDates)))
QLcoupon.rates<- coupon.rate / yF
QLcoupon.rates[(is.na(QLcoupon.rates))]<-QLcoupon.rates[!(is.na(QLcoupon.rates))] %>% tail(1)
# diff(nodeDates) /365
# coupon.rates[1]<-.125
schedule <- list(dates = nodeDates,
isRegular = rep(F,length(nodeDates)-1),
calendar='Turkey',
period=-1,
businessDayConvention='Following',
terminationDateConvention='Following',
dateGeneration='Forward',
endOfMonth=0)
fit<-FixedRateBond(bond,
QLcoupon.rates,
schedule,
calc,
price=myCleanPrice,
#yield=yield
);fit
cRateToPayment<-function(coupon.rate,desiredCashFlow){
fit<-FixedRateBond(bond,
coupon.rate,
schedule,
calc,
price=myCleanPrice,
#yield=yield
)
(fit$cashFlow[1,2]-desiredCashFlow)^2
}
cRateToPayment(.13,1.14)
discoveredCouponRate<-optimize(cRateToPayment,c(0.05,.20),desiredCashFlow=1.14187)$minimum
fit<-FixedRateBond(bond,
discoveredCouponRate,
schedule,
calc,
price=myCleanPrice,
#yield=yield
)
dbhandle<-odbcConnect("osmanli1", "osmanlibond_usr", "osmanlibond1*") # c("osmanli1", "osmanlibond_usr", "osmanlibond1*")
dbhandle
bondDef <- RODBC::sqlQuery(dbhandle, "select * from BONDDEFINITION WHERE ISIN = 'TRFGDKMA1713' ")
bondDef
RODBC::sqlTables(dbhandle)
bondDef <- RODBC::sqlQuery(dbhandle, "select * from tblBondStatus' ")
bondDef
RODBC::sqlQuery(dbhandle, "select * from tblBondStatus")
RODBC::sqlQuery(dbhandle, "select * from BONDDEFINITION WHERE  BondStatusId >1")
RODBC::sqlQuery(dbhandle, "select * from tblBondStatus")
bondDef <- RODBC::sqlQuery(dbhandle, "select * from BONDDEFINITION WHERE ISIN = 'TRFGDKMA1713' ")
bondDef
RODBC::sqlQuery(dbhandle, paste0("select * from BONDDEFINITION WHERE  BondStatusId >1 AND MATURITY >", Sys.Date()))
Sys.Date()
paste0("select * from BONDDEFINITION WHERE  BondStatusId >1 AND MATURITY >", Sys.Date())
RODBC::sqlQuery(dbhandle, paste0("select * from BONDDEFINITION WHERE  BondStatusId >1 AND MATURITY >'", Sys.Date(), "'"))
RODBC::sqlQuery(dbhandle, paste0("select * from BONDDEFINITION WHERE  YIELDTYPE >0 AND BondStatusId >1 AND MATURITY >'", Sys.Date(), "'"))
osmanliOpen<- RODBC::sqlQuery(dbhandle, paste0("select * from BONDDEFINITION WHERE  YIELDTYPE >0 AND BondStatusId >1 AND MATURITY >'", Sys.Date(), "'"))
sapply(osmanliOpen$ISIN,rasyoGetCoupons)
lapply(osmanliOpen$ISIN,rasyoGetCoupons)
temp<-lapply(osmanliOpen$ISIN,rasyoGetCoupons)[[1]]
temp
temp[,1]
diff(temp[,1])
1.152675*31/32
1.116516*32/31
osmCashFlows<-lapply(osmanliOpen$ISIN,rasyoGetCoupons)
osmCashFlows<-lapply(osmanliOpen$ISIN,function(x) try(rasyoGetCoupons(x),
error=function(e) NA))
osmCashFlows<-lapply(osmanliOpen$ISIN,function(x) try({rasyoGetCoupons(x)},
error=function(e) NA))
osmCashFlows<-lapply(osmanliOpen$ISIN,function(x) tryCatch({rasyoGetCoupons(x)},
error=function(e) NA))
osmCashFlows
osmOpen<- RODBC::sqlQuery(dbhandle, paste0("select * from BONDDEFINITION WHERE  YIELDTYPE >0 AND BondStatusId >1 AND MATURITY <'", Sys.Date(), "'"))
osmOpen
osmCashFlows<-lapply(osmanliOpen$ISIN,function(x) tryCatch({rasyoGetCoupons(x)},
error=function(e) NA))
osmCashFlows
osmCashFlows<-lapply(osmOpen$ISIN,function(x) tryCatch({rasyoGetCoupons(x)},
error=function(e) NA))
osmCashFlows
osmCashFlows<-lapply(osmOpen$ISIN,function(x) tryCatch(rasyoGetCoupons(x),
error=function(e) NA))
osmCashFlows
osmOpen<- RODBC::sqlQuery(dbhandle, paste0("select * from BONDDEFINITION WHERE  YIELDTYPE >0 AND BondStatusId >1 AND MATURITY >'", Sys.Date(), "'"))
osmCashFlows<-lapply(osmOpen$ISIN,function(x) tryCatch(rasyoGetCoupons(x),
error=function(e) NA))
osmCashFlows
diff(osmCashFlows[[7]][,1])
(osmCashFlows, function(x) diff(x[,1]))
sapply(osmCashFlows, function(x) diff(x[,1]))
lapply(osmCashFlows, function(x) diff(x[,1]))
osmOpen<- RODBC::sqlQuery(dbhandle, paste0("select * from BONDDEFINITION WHERE  YIELDTYPE >0 AND BondStatusId >1 AND MATURITY >'", Sys.Date(), "'"))
osmOpen
(RODBC::sqlQuery(dbhandle, "select * from CASHFLOW where ISIN='TRSSKFKA1813' order by DISCLOSUREID ASC"))[,3]
(RODBC::sqlQuery(dbhandle, "select * from CASHFLOW where ISIN='TRSSKFKA1813' order by DISCLOSUREID ASC"))
osmCashFlows<-lapply(osmOpen$ISIN,function(x) tryCatch(rasyoGetCoupons(x),
error=function(e) NA))
osmCashFlows
names(osmCashFlows) <-  osmOpen$ISIN
osmCashFlows
httr::GET
request_build
httr:::request_build
httr:::request_perform
install.packages(c("anomalyDetection", "car", "ecodist", "Formula", "haven", "htmlwidgets", "httpuv", "js", "Rcpp", "Rsymphony", "TTR", "xts"))
install.packages(c("car", "Rsymphony"))
install.packages("car",dependencies=TRUE)
install.packages("car")
install.packages("quantreg")
install.packages("car")
install.packages("Rsymphony")
install.packages("Rsymphony", type = "source")
install.packages("Rsymphony",dependencies = T)
library("Rsymphony")
install.packages("Rsymphony")
install.packages("Rsymphony", configure.args="--with-SYMPHONY-include=/Users/timo/Applications/symphony/include/ --with-SYMPHONY-lib=/Users/timo/Applications/symphony/lib",type="source")
install.packages("Rsymphony", configure.args="--with-SYMPHONY-include=/Users/hrn/Applications/symphony/include/ --with-SYMPHONY-lib=/Users/hrn/Applications/symphony/lib",type="source")
install.packages("Rsymphony", configure.args="--with-SYMPHONY-include=/usr/local/Cellar/symphony/5.6.14/include/ --with-SYMPHONY-lib=/usr/local/Cellar/symphony/5.6.14/lib",type="source")
install.packages("Rsymphony", configure.args="--with-SYMPHONY-include=/usr/local/Cellar/symphony/5.6.14/include/cbc/coin/ --with-SYMPHONY-lib=/usr/local/Cellar/symphony/5.6.14/lib",type="source")
install.packages("Rsymphony", type = "source")
install.packages("Rsymphony", configure.args="--with-symphony-include=/usr/local/Cellar/symphony/5.6.14/include/cbc/coin/ --with-symphony-lib=/usr/local/Cellar/symphony/5.6.14/lib",type="source")
install.packages("Rsymphony", configure.args="--with-symphony-include=/usr/local/Cellar/symphony/5.6.14/include/cbc/coin/ --with-symphony-lib=/usr/local/Cellar/symphony/5.6.14/lib")
install.packages("Rsymphony", configure.args="--with-symphony-include=/usr/local/Cellar/symphony/5.6.14/include/cbc/coin --with-symphony-lib=/usr/local/Cellar/symphony/5.6.14/lib",type="source")
install.packages("Rsymphony", configure.args="--with-symphony-include=/usr/local/Cellar/symphony/5.6.14/include/cbc/coin/ --with-symphony-lib=/usr/local/Cellar/symphony/5.6.14/lib/",type="source")
install.packages("Rsymphony", configure.args="-I/usr/local/Cellar/symphony/5.6.14/include/cbc/coin/ -L/usr/local/Cellar/symphony/5.6.14/lib/",type="source")
install.packages("Rsymphony", configure.args="--with-SYMPHONY-include=/usr/local/Cellar/symphony/5.6.14/include/cbc/coin/ --with-SYMPHONY-lib=/usr/local/Cellar/symphony/5.6.14/lib/",type="source")
install.packages("Rsymphony", configure.args="--with-SYMPHONY-include=/usr/local/Cellar/symphony/5.6.14/include/cbc/ --with-SYMPHONY-lib=/usr/local/Cellar/symphony/5.6.14/lib/",type="source")
install.packages("Rsymphony", configure.args="--with-SYMPHONY-include=/usr/local/Cellar/symphony/5.6.14/include/cbc/ --with-SYMPHONY-lib=/usr/local/Cellar/symphony/5.6.14/lib/",type="source")
install.packages("Rsymphony")
write.csv(installed.packages()[,1], file=".R/installedPackages2.txt",row.names = F)
3
getwd()
file.path(R.home("bin"), "R")
file.path(R.home("bin"), "R")
read.csv(".R/installedPackages2.txt",row.names = F)
read.csv(".R/installedPackages2.txt")
read.csv(".R/installedPackages2.txt")[,1]
install.packages(read.csv(".R/installedPackages2.txt")[,1])
install.packages(read.csv(".R/installedPackages2.txt")[, 1])
temp<-read.csv(".R/installedPackages2.txt")[,1]
install.packages(temp[1])
temp[1]
install.packages(temp)
install.packages(temp)
install.packages(temp[1:10])
temp[1:10] %in% installed.packages()
temp[1:10] !%in% installed.packages()
!temp[1:10] %in% installed.packages()
which(!temp[1:10] %in% installed.packages())
temp[!temp[1:10] %in% installed.packages()]
!temp[1:10] %in% installed.packages()
library("quadprog")
install.packages("quadprog")
library("quadprog")
!temp[1:10] %in% installed.packages()
temp
temp[1:10]
library("blotter")
library("bizdays")
install.packages("blotter")
install.packages("blotter", repos="http://R-Forge.R-project.org" )
install.packages(temp[11:20])
temp[11:20] !%in% installed.packages()
temp[11:20] %in% installed.packages()
install.packages(temp[21:30])
install.packages(temp[21:30],source=T)
install.packages(temp[21:30],type = "source")
temp[21:30] %in% installed.packages()
install.packages(temp[31:40],type = "source")
temp[31:40] %in% installed.packages()
install.packages(temp[41:50])
temp[41:50] %in% installed.packages()
temp[41:50] [3]
install.packages("IRkernel")
install.packages("IRkernel",type="source")
devtools::install_github("IRkernel/IRkernel")
temp[41:50] %in% installed.packages()
install.packages(temp[51:60])
install.packages(temp[51:60])
temp[51:60] %in% installed.packages()
devtools::install_github("martingale/Rmatriksdata")
devtools::install_github("martingale/Rmatriksdata",dependencies=T)
install.packages(temp[61:70])
temp[61:70] %in% installed.packages()
temp[70]
devtools::install_github("R-Finance/quantstrat")
devtools::install_github("R-Finance/blotter")
devtools::install_github("R-Finance/quantstrat")
install.packages(temp[71:80], type="source")
install.packages(temp[71:80], type = "source")
install.packages("rJava")
install.packages("rJava")
install.packages("RJDBC")
install.packages("RJDBC",type="source")
install.packages("rJava",type="source")
install.packages("rJava",type="source")
install.packages(temp[81:90], type = "source")
rem<-temp[!temp%in% installed.packages()]
rem
remp<-rem[-1]
rem<-rem[-1]
rem
install.packages(rem,type="source")
install.packages("Rsymphony")
rem<-temp[!temp%in% installed.packages()]
rem
install.packages("shinyIncubator")
install.packages("snowfall")
rem<-temp[!temp%in% installed.packages()]
rem
install.packages("proto")
install.packages("microbenchmark")
install.packages("microbenchmark",type="source")
rem
rem<-temp[!temp%in% installed.packages()]
rem
install.packages("vars",type="source")
rem<-temp[!temp%in% installed.packages()]
rem
install.packages("SuppDists",type="source")
devtools::install_github("rstudio/shiny-incubator")
rem<-temp[!temp%in% installed.packages()]
rem
install.packages("VineCopula",type="source")
install.packages(temp[51:60],type="source")
install.packages(temp[51:60], type = "source")
.libPaths()
.libPaths()
install.packages("Rsymphony")
help(Startup)
file.path(R.home("bin"), "R")
install.packages("twitter")
install.packages("twitteR")
install.packages("pango/")
install.packages("pango")
install.packages("rPython")
install.packages("waveslim")
install.packages("BH")
install.packages("Cairo")
red.csv("~/.Rold/installedPackagesAdd.txt")
read.csv("~/.Rold/installedPackagesAdd.txt")
read.csv("~/.Rold/installedPackagesAdd.txt")[,1]
remA<-read.csv("~/.Rold/installedPackagesAdd.txt")[,1]
remA[!remA%in%installed.packages()]
install.packages("lubridate")
remA[!remA%in%installed.packages()]
install.packages("bcp",type="source")
install.packages("TTR")
install.packages("TTR")
q()
install.packages("Rcpp")
q()
.libPaths()
remA
remA<-read.csv("~/.Rold/installedPackagesAdd.txt")[,1]
remA
.libPaths()
devtools::install_github("vc-k/rquantlib")
devtools::install_github("vc-k/rquantlib", force=T)
grep('blas', system2('lsof', c('-p', Sys.getpid()), stdout=TRUE), value = TRUE)
grep('blas', system('lsof', c('-p', Sys.getpid()), stdout=TRUE), value = TRUE)
grep('blas', system2('lsof', c('-p', Sys.getpid()), stdout=TRUE), value = TRUE)
grep('blas', system2('lsof', c('-p', Sys.getpid()), stdout=TRUE), value = TRUE)
Sys.getpid()
Sys.getpid()
Sys.getpid()
update.packages()
library("h2o")
install.packages("h2o")
install.packages("h2o", type="source")
h2o::
update.packages()
q()
read.csv("~/PycharmProjects/pTrade/outP.csv",header=F,colClasses = "numeric")
tmep<-read.csv("~/PycharmProjects/pTrade/outP.csv",header=F,colClasses = "numeric")[,1]
tmep<-read.csv("~/PycharmProjects/pTrade/outP.csv",header=F,colClasses = "numeric")[1,]
temp
tmep
tmep[1]
tmep[2]
class(tmep)
tmep<-read.csv("~/PycharmProjects/pTrade/outP.csv",header=F,colClasses = "numeric")[1,,drop=T]
class(tmep)
unlist(tmep)
akbnk<-read.csv("/Volumes/san/gunIciSerkan/akbnkG.csv",header=F,colClasses = "numeric")
akbnk<-read.csv("/Volumes/san/gunIciSerkan/akbnkG.csv",header=F,colClasses = "numeric",sep=";")
akbnk<-read.csv("/Volumes/san/gunIciSerkan/akbnkG.csv",header=F,sep=";")
head(sk)
head(akbnk)
tail(akbnk)
dim(akbnk)
akbnk[706857/2,]
length(akbnk$V15)
706857/2
akbnk[353428:353433,]
akbnk[353428:353433,"V211"]
akbnk[353428:353433,"V22"]
akbnk[1:1000,"V22"]
akbnk[9900:10000,"V22"]
akbnk[19000:19100,"V22"]
all.equal( akbnk[19000:19100,"V22"])
diff( akbnk[19000:19100,"V22"])
diff( akbnk[19000:19500,"V22"])
diff( akbnk[19000:20500,"V22"])
akbnk[19000:19100,]
akbnk[18000:18100,]
length(akbnk$V24)
unique(akbnk$V24)
akbnk[17000:17100,]
unique(akbnk$V10)
tmep
tmep<-unlist(tmep)
plot(tmep)
min(tmep)
max(tmep)
min(tmep-10000)
min(tmep-1000000)
plot(tmep-1000000)
seq(5,100,2)
length(seq(5,100,2))
length(seq(100,500,5))
48*81
length(tmep)
47*80
length(seq(100,500,by = 5))
48*80
length(seq(5,100,2))
(seq(5,100,2))
length(seq(100,500,5))
81*48
48*80
matrix(tmep,40)
plot(matrix(tmep,40))
(matrix(tmep,40))
which.max(matrix(tmep,40))
which(matrix(tmep,40),arr.ind = T)
which(matrix(tmep,40),arr.ind = F)
which(matrix(tmep,40))
which.max(matrix(tmep,40))
temp=matrix(tmp,40)
temp=matrix(tmep,40)
40*81
length(tmep)
47*80
48*80
temp=matrix(tmep,48)
which.max(temp)
which.max(temp)==temp
which(which.max(temp)==temp,arr.ind = TRUE)
which(max(temp)==temp,arr.ind = TRUE)
which(max(temp)==temp,arr.ind = TRUE)
temp[1,]
temp[2,]
temp[,38]
which(colSums(temp))
max(colSums(temp))
colSums(temp)==max(colSums(temp))
rowSums(temp)==max(rowSums(temp))
tmep<-read.csv("~/PycharmProjects/pTrade/outP.csv",header=F,colClasses = "numeric")[1,,drop=T]
tmep<-read.csv("~/PycharmProjects/pTrade/outP.csv",header=F,colClasses = "numeric")[1,,drop=T]
tmep
unlist(tmep)
lengh(tmep)
length(tmep)
length(unlist(tmep))
7776/81
temp=matrix(tmep,nrow = 96)
which(max(temp)==temp,arr.ind = T)
which(max(temp)==temp)
max(temp)==temp
temp
which(max(temp))
max(temp)
class(temp)
temp[1,1]
temp=matrix(unlist(tmep),nrow = 96)
which(max(temp)==temp,arr.ind = T)
plot(unlist(tmep))
heatmap(temp)
heatmap(temp[1:5,1:5])
heatmap(temp)
heatmap(temp,keep.dendro = F)
heatmap(temp,NA,NA)
temp=matrix(unlist(tmep),nrow = 96,byrow = F)
heatmap(temp,NA,NA)
temp=matrix(unlist(tmep),nrow = 96,byrow = T)
heatmap(temp,NA,NA)
heatmap(temp,NA,NA)
tmep<-read.csv("~/PycharmProjects/pTrade/outP.csv",header=F,colClasses = "numeric")[1,,drop=T]
temp=matrix(unlist(tmep),nrow = 96,byrow = T)
heatmap(temp,NA,NA)
heatmap(temp,NA,NA)
heatmap(temp,NA)
heatmap(temp,NA,NA)
heatmap(temp-1000000,NA,NA)
?heatmap(temp-1000000,NA,NA)
heatmap(temp-1000000,NA,NA,col = topo.colors(16))
heatmap(temp-1000000,NA,NA,col = topo.colors(1))
heatmap(temp-1000000,NA,NA,col = topo.colors(2))
heatmap(temp-1000000,NA,NA,col = topo.colors(3))
heatmap(temp-1000000,NA,NA,col = topo.colors(4))
heatmap(temp-1000000,NA,NA,col = topo.colors(100))
heatmap(temp-1000000,NA,NA,col = topo.colors(0))
heatmap(temp-1000000,NA,NA,col = topo.colors(-1))
heatmap(temp-1000000,NA,NA,col = topo.colors(5))
heatmap(temp-1000000,NA,NA,col = topo.colors(12))
heatmap(temp-1000000,NA,NA,col = topo.colors(22))
heatmap(temp-1000000,NA,NA,col = topo.colors(42))
topo.colors(42)
?topo.colors(42)
heatmap(temp-1000000,NA,NA,col = cm.colors(1, alpha = 1))
heatmap(temp-1000000,NA,NA,col = cm.colors(11, alpha = 1))
heatmap(temp-1000000,NA,NA,col = cm.colors(5, alpha = 1))
heatmap(temp-1000000,NA,NA,col = cm.colors(1222, alpha = 1))
heatmap(temp-1000000,NA,NA,col = cm.colors(2, alpha = 1))
heatmap(temp-1000000,NA,NA,col = cm.colors(2, alpha = 10))
heatmap(temp-1000000,NA,NA,col = cm.colors(2, alpha = 2))
heatmap(temp-1000000,NA,NA,col = cm.colors(2, alpha = .1))
heatmap(temp-1000000,NA,NA,col = cm.colors(2, alpha = .5))
heatmap(temp-1000000,NA,NA,col = cm.colors(2, alpha = 1))
heatmap(temp-1000000,NA,NA,col = cm.colors(3, alpha = 1))
heatmap(temp-1000000,NA,NA,col = cm.colors(5, alpha = 1))
heatmap(temp,NA,NA,col = cm.colors(5, alpha = 1))
heatmap(temp,NA,NA)
install.packages(c("cubature", "curl", "dplyr", "git2r"))
akbnk<-readr::read_csv("/Volumes/san/gunIciSerkan/akbnkG.csv")
akbnk<-readr::read_csv("/Volumes/san/gunIciSerkan/akbnkG.csv",sep=";")
head(akbnk)
class(akbnk)
dim(akbnk)
akbnk<- readr::read_table("/Volumes/san/gunIciSerkan/akbnkG.csv")
dim(akbnk)
akbnk<- readr::read_delim("/Volumes/san/gunIciSerkan/akbnkG.csv",";")
dim(akbnk)
head(akbnk)
names(akbnk)
akbnk<- readr::read_delim("/Volumes/san/gunIciSerkan/akbnkG.csv",";",col_names = F)
names(akbnk)
head(akbnk)
unique(akbnk$X1)
unique(akbnk$X6)
unique(akbnk$X7)
unique(akbnk$X9)
unique(akbnk$X10)
which(akbnk$X10="GTD")
which(akbnk$X10=="GTD")
load(".RData")
akbnk<- data.table::fread("/Volumes/san/gunIciSerkan/akbnkG.csv",";",header = F)
head(akbnk)
class(akbnk)
akbnk[,3]
sapply(akbnk,function(x) length(unique(x)))
akbnk$V1
akbnk[(akbnk$V1=="2017-04-03"),]
dim(akbnk[(akbnk$V1=="2017-04-03"),])
dim(akbnk)
dim(akbnk[(akbnk$V1=="2017-04-03"),])
dim(akbnk[(akbnk$V1=="2017-04-03"),])
dim(akbnk[(akbnk$V1=="2017-04-03"),])
akbnk[,3]
onedayAkbnk<-akbnk[(akbnk$V1=="2017-04-03"),]
?tapply
require(stats)
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
groups
tapply(groups, groups, length) #- is almost the same as
n <- 17;
fac <- factor(rep_len(1:3, n), levels = 1:5)
fac
table(fac)
tapply(1:n, fac, sum)
aggregate(state.x77, list(Region = state.region), mean)
state.x77
names(state.x77)
colnames(state.x77)
aggregate(state.x77, list(Region = state.region), mean)
aggregate(state.x77, list(Region = state.region1), mean)
list(Region = state.region)
state.region
state.x77
aggregate(state.x77, list(Region = state.region), mean)
split(onedayAkbnk,onedayAkbnk$V2)
onedayAkbnk$V2
head(onedayAkbnk)
all<-split(onedayAkbnk,onedayAkbnk$V3)
all[[1]]
length(all)
any(onedayAkbnk$V3==onedayAkbnk$V4)
which(onedayAkbnk$V3==onedayAkbnk$V4)
onedayAkbnk$V3[1]
onedayAkbnk$V4[1]
onedayAkbnk$V4[1]==onedayAkbnk$V3[1]
which(onedayAkbnk$V3!=onedayAkbnk$V4)
onedayAkbnk$V4[3849]==onedayAkbnk$V3[3849]
onedayAkbnk$V4[3849]
onedayAkbnk$V3[3849]
head(onedayAkbnk)
onedayAkbnk[3849:3849+5,]
onedayAkbnk[3849:(3849+5),]
onedayAkbnk[,c(16,19:20)]
Rmatriksdata::matriksData("GARAN","depth", "2017-07-01", "2017-07-01", "1day")
tmp<-Rmatriksdata::matriksData("GARAN","depth", "2017-07-01", "2017-07-01", "1day")
tmp<-Rmatriksdata::matriksData("GARAN","depth", "2017-07-01", "2017-07-02", "1day")
tmp<-Rmatriksdata::matriksData("GARAN","depth", "2017-07-01", "2017-07-04", "1day")
?Rmatriksdata::matriksData("GARAN","depth", "2017-07-01", "2017-07-04", "1day")
Rmatriksdata::matriksData("GARAN","depth", "2016-07-01", "2016-07-01", "1day")
Rmatriksdata::matriksData("GARAN","depth", "2016-07-01", "2016-07-01")
Rmatriksdata::matriksData("GARAN","bar", "2016-07-01", "2016-07-01", "1day")
Rmatriksdata::matriksData("GARAN","depth", "2016-04-01", "2016-04-01")
Rmatriksdata::matriksData("GARAN","bestbidoffer", "2016-04-01", "2016-04-01")
onedayAkbnk[,c(16,19:20)]
head(onedayAkbnk[,c(16,19:20)],100)
??write_csv
library(read)
library(readr)
all[[1]]
onedayAkbnk <- all[[1]]
length(all)
which(onedayAkbnk$V3!=onedayAkbnk$V4)
readr::write_csv(onedayAkbnk,path = "~/Google Drive/hftbilgi/AKBANK_2017-04-03.csv")
readr::write_csv(akbnk,path = "~/Google Drive/hftbilgi/SerkansData/AKBANK_2017-04.csv")
library("RQuantLib")
detach("package:RQuantLib")
setwd("~/PycharmProjects/pTrade/out.csv")
setwd("~/PycharmProjects/pTrade/")
dim(readr::read_csv("outP.csv"))
ilhan<-(readr::read_csv("outP.csv",col_names = F)
ilhan<-(readr::read_csv("outP.csv",col_names = F)
)
ilhan<- readr::read_csv("outP.csv",col_names = F)
head(ilhan)
head(ilhan$X1)
ilhan[,1:5]
ilhan<- readr::read_csv("out_ilhan.csv.csv",col_names = F)
setwd("~/PycharmProjects/pTrade/")
ilhan<- readr::read_csv("out_ilhan.csv.csv",col_names = F)
ilhan<- readr::read_csv("out_ilhan.csv",col_names = F)
head(ilhan)
ilhan[,1]
ilhan[,1,F]
class(ilhan)
heatmap(ilhan,NA,NA)
heatmap(ilhan)
heatmap(as.matrix(ilhan))
matrix(ilhan)
dim(ilhan)
as.matrix(ilhan)
heatmap(as.matrix(ilhan))
heatmap(as.matrix(as.numeric(ilhan)))
ilhan<- readr::read_csv("out_ilhan.csv",colClasses="numeric", col_names = F)
ilhan<- read.csv("out_ilhan.csv",colClasses="numeric", col_names = F)
ilhan<- read.csv("out_ilhan.csv",colClasses="numeric", header = F)
ilhan<- read.csv("out_ilhan.csv",colClasses="numeric")
ilhan
head(ilhan)
heatmap(ilhan)
sapply(ilhan,class)
colnames(ilhan)<-1:ncol(ilhan)
sapply(ilhan,class)
heatmap(ilhan)
heatmap(matrix(rnorm(1000,100)))
heatmap(matrix(rnorm(1000),100))
heatmap(as.matrix(ilhan)))
heatmap(as.matrix(ilhan))
heatmap(as.matrix(ilhan),NA,NA)
ilhan[,1]
ilhan[,2]
ilhan<- read.csv("out_ilhan.csv",colClasses="numeric",row.names = T)
ilhan<- read.csv("out_ilhan.csv",colClasses="numeric")[,-1]
head(ilhan)
heatmap(as.matrix(ilhan),NA,NA)
rownames(ilhan)
heatmap((ilhan),NA,NA)
heatmap(as.matrix(ilhan),NA,NA)
colnames(ilhan)
rownames(ilhan)<-5:100
rownames(ilhan)<-5:101
rownames(ilhan)<-5:100
heatmap(as.matrix(ilhan),NA,NA)
max(ilhan)
min(ilhan)
mean(ilhan)
mean(c(ilhan))
anyNA(c(ilhan))
(c(ilhan))
(as.vector(ilhan))
min(as.vector(ilhan))
max(as.vector(ilhan))
max(as.matrix(ilhan))
mean(as.matrix(ilhan))
